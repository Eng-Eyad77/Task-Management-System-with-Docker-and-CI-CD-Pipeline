pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Eng-Eyad77/Testing-Project.git' // رابط مستودع GitHub
        GIT_BRANCH = 'main' // الفرع الذي سيتم سحبه
        EMAIL_RECIPIENTS = 's444003270@uqu.edu.sa' // بريدك الإلكتروني للإشعارات
        DOCKER_IMAGE = 'myapp:latest' // اسم صورة Docker النهائية
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: "${GIT_REPO}"
                    ]]
                ])
            }
        }

        stage('Build') {
            steps {
                echo 'Building application...'
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                sh 'mvn clean test'
            }
        }

        stage('Package') {
            steps {
                echo 'Packaging application...'
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                // يبني صورة Docker باستخدام Dockerfile الخارجي
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Deploy Docker Container') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } // يتم النشر فقط إذا نجحت جميع المراحل السابقة
            }
            steps {
                echo 'Deploying application in Docker container on port 8090...'
                sshagent(['your-ssh-credential-id']) { // تأكد من استخدام معرف Credential SSH الخاص بك
                    // اتصل بالخادم البعيد وقم بتشغيل الحاوية
                    sh """
                        ssh user@remote_server_ip << EOF
                        docker stop myapp || true
                        docker rm myapp || true
                        docker run -d --name myapp -p 8090:8080 ${DOCKER_IMAGE}
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
            emailext(
                subject: "SUCCESS: Jenkins Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}]",
                body: """<p>Good news! The Jenkins job '<b>${env.JOB_NAME}</b>' succeeded.</p>
                         <p>Build Number: #${env.BUILD_NUMBER}</p>
                         <p>Check the build details: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                to: env.EMAIL_RECIPIENTS,
                mimeType: 'text/html'
            )
        }
        failure {
            echo 'Pipeline failed!'
            emailext(
                subject: "FAILURE: Jenkins Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}]",
                body: """<p>Oops! The Jenkins job '<b>${env.JOB_NAME}</b>' failed.</p>
                         <p>Build Number: #${env.BUILD_NUMBER}</p>
                         <p>Check the build details: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                to: env.EMAIL_RECIPIENTS,
                mimeType: 'text/html'
            )
        }
    }
}
